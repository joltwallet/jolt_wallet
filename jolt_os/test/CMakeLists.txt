# Prepends a prefix to each string element in a list
FUNCTION(PREPEND var prefix)
   SET(listVar "")
   FOREACH(f ${ARGN})
      LIST(APPEND listVar "${prefix}/${f}")
   ENDFOREACH(f)
   SET(${var} "${listVar}" PARENT_SCOPE)
ENDFUNCTION(PREPEND)

# Parse the exact deterministic output files for the proto files
file(GLOB_RECURSE SRC_FILES "test_*.c")
file(GLOB_RECURSE REL_PROTO_FILES RELATIVE ${COMPONENT_DIR} "*.proto")
if(REL_PROTO_FILES)
    string(REGEX REPLACE "[.]proto$" ".pb.c" REL_PROTO_SRCS ${REL_PROTO_FILES})
    PREPEND(BUILD_PROTO_SRCS ${CMAKE_CURRENT_BINARY_DIR} ${REL_PROTO_SRCS})
endif()

##################################
# esp-idf component registration #
##################################
idf_component_register(
        SRCS
            ${SRC_FILES}
            ${BUILD_PROTO_SRCS}
        INCLUDE_DIRS
            "."
        PRIV_INCLUDE_DIRS
            # For the generated protobuf header files
            "${CMAKE_CURRENT_BINARY_DIR}"
        REQUIRES
            "unity"
            "jolt_os"
)

##########
# Nanopb #
##########
set(NANOPB_SRC_ROOT_FOLDER "${COMPONENT_DIR}/../../components/nanopb/nanopb")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${NANOPB_SRC_ROOT_FOLDER}/extra)
set(NANOPB_GENERATE_CPP_APPEND_PATH FALSE)

find_package( Nanopb REQUIRED )
include_directories(${NANOPB_INCLUDE_DIRS})

if(NOT NANOPB_FOUND)
    message(FATAL_ERROR "Failed to find Nanopb library")
endif()

if(REL_PROTO_FILES)
    # Defines PROTO_SRCS - autogenerated source (*.pb.c) files
    # Defines PROTO_HDS - autogenerated header (*.pb.h) files
    nanopb_generate_cpp(PROTO_SRCS PROTO_HDRS RELPATH ${COMPONENT_DIR} ${REL_PROTO_FILES})
    set_source_files_properties(${PROTO_SRCS} ${PROTO_HDRS}
        PROPERTIES GENERATED TRUE)
    add_custom_target(protobuf_${COMPONENT_LIB} DEPENDS ${PROTO_SRCS} ${PROTO_HDRS})
    add_dependencies(${COMPONENT_LIB} protobuf_${COMPONENT_LIB})
    set_property(DIRECTORY "${COMPONENT_DIR}" APPEND PROPERTY
        ADDITIONAL_MAKE_CLEAN_FILES ${PROTO_SRCS} ${PROTO_HDRS})
endif()
